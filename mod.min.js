const DONE_BUTTON_CLASS = "jsx-570181799";
var GAMEDATA = {
        p: {
            l: 1,
            h: 8,
            t: 3,
            i: 11,
            o: 9,
            u: 15,
            g: 10,
            m: 5,
            A: 7,
            T: 14,
            O: 13
        },
        v: {
            S: 28,
            N: 26,
            C: 27,
            D: 18,
            _: 5,
            R: 6,
            M: 7,
            L: 15,
            k: 23,
            G: 20,
            I: 2,
            j: 3,
            B: 14,
            P: 21,
            U: 22,
            $: 11,
            W: 24,
            J: 25,
            Y: 12,
            K: 9,
            F: 16,
            H: 17,
            V: 35,
            X: 34
        }
    },
    _GAMEDATA = {};
if (Object.keys(GAMEDATA)
    .forEach((p => {
        _GAMEDATA[p] = {}, Object.keys(GAMEDATA[p])
            .forEach((x => {
                _GAMEDATA[p][GAMEDATA[p][x]] = x
            }))
    })), window._mod_injected || (window.mod = new function() {
        this.q = 0, this.Z = null, this.pp = !0, this.xp = null, this.sp = !1, this.lp = {}, this.hp = {}, this.tp = 1, this.ep = 200, this.ip = .5, this.np = !1, this.op = {}, this.rp = {}, this.ap = !1, this.dp = {};
        let p = [];
        for (let x = 0; x < 256; x++) {
            let s = x.toString(16);
            s.length < 2 && (s = "0" + s), p.push(s)
        }
        this.cp = () => {
                this.lp = {}
            }, this.wp = () => {
                let p = document.createElement("button");
                return p.classList = DONE_BUTTON_CLASS + " small fakereadybutton", p.disabled = !0, p.innerHTML = '<i class="jsx-3322258600 pencil fakebtn"></i><strong class="sendingbtnContent">Sending...</strong>', p
            }, this.up = (p, x, s) => "#000000", this.gp = p => fetch(p)
            .then((p => p.text())), this.mp = p => fetch(p)
            .then((p => p.arrayBuffer())), this.fp = () => Boolean(document.getElementsByClassName("note")
                .length), this.Ap = p => new Promise((x => {
                let s = document.createElement("img");
                s.onload = function() {
                    x(s)
                }, s.src = p
            })), this.Ep = async p => {
                this.sp || p && -1 != window.location.href.indexOf("draw") && (this.sp = !0, this.bp(), setTimeout((() => {
                    this.Ap(p)
                        .then(this.Tp)
                        .then(this.Op)
                        .then((() => {}))
                }), 500))
            }, this.bp = p => {
                let x = document.querySelector("button." + DONE_BUTTON_CLASS + ".small");
                return x.style.display = "none", document.querySelector(".fakebtn") || x.parentElement.appendChild(this.wp()), p
            }, this.Op = p => {
                document.querySelector("button." + DONE_BUTTON_CLASS + ".small")
                    .style.display = "";
                let x = document.querySelector(".fakereadybutton");
                return x && x.remove(), p
            }, this.vp = p => {
                if (!p) return !1;
                let x = p.match(/function\s\w{1,}\(\w{0,}\){[^\{]+{[^\}]{0,}return\[\]\.concat\(Object\(\w{0,}\.*\w{0,}\)\(\w{0,}\),\[\w{0,}\]\)[^\}]{0,}}[^\}]{0,}}/g);
                if (!x) return !1;
                let s = x[0].match(/\w{1,}(?=\.setData)/g)[0];
                return p.replace(/\(\(function\(\){if\(!\w{1,}\.disabled\)/, `((function(){;window.setData = ${s}.setData;if(!${s}.disabled)`)
            }, this.Sp = p => {
                this.xp = p.target
            }, this.Np = p => {
                if (0 == p.indexOf("42")) try {
                    this.Cp(JSON.parse(p.substr(2, p.length - 2)))
                } catch (p) {
                    Log(p)
                }
            }, this.Cp = p => {
                if (7 == p[1]) {
                    let x = "v".toLowerCase(),
                        s = "d".toLowerCase();
                    1 == p[2][s] || 3 == p[2][s] ? this.lp[p[2][x][1]] = p[2][x] : 2 == p[2][s] && delete this.lp[p[2][x]]
                }
            }, this.Dp = async (p, x) => {
                if (this.sp) return;
                let s = [],
                    l = [];
                (p => {
                    Object.keys(p)
                        .forEach((x => {
                            let h = p[x],
                                t = [h[0], +x, h[2]];
                            for (let p = 3; p < h.length; p++) t.push(h[p]);
                            let e = [h[0], +x, h[2], h[3]];
                            l.push(`42[2,7,{"t":${this.Z||0},"d":1,"v":${JSON.stringify(e)}}]`), l.push(`42[2,7,{"t":${this.Z||0},"d":3,"v":${JSON.stringify(t)}}]`), s.push(t)
                        }))
                })(p), this._p() ? window.setData(s) : x && this.Rp(x), this.sp = !0, this.bp(), this.Mp(l)
                    .then((() => this.Op()))
            }, this._p = () => "function" == typeof window.setData, this.Lp = async p => {}, this.yp = p => {
                let x = p[1],
                    s = p[2];
                if (x == GAMEDATA.v._ && (this.cp(), this.hp = {}, this.dp = {}, this.ap = !1), x == GAMEDATA.v.Y && (this.op = {}), x == GAMEDATA.v.K) {
                    let p, x;
                    if (Log(s), Object.keys(s)
                        .forEach((l => {
                            "user" == l && Object.keys(s[l])
                                .forEach((p => {
                                    "nick" == p && (x = s[l][p])
                                })), "data" == l && (p = s[l])
                        })), x && p instanceof Array) {
                        this.op[x] = {};
                        for (let s in p) this.op[x][s] = p[s];
                        document.querySelectorAll(".drawBalloon")
                            .forEach((p => {
                                if (p.querySelector(".nick")
                                    .innerHTML == x) {
                                    let s = `<div onclick="globalThis.saveAlbumDrawing('${x}')" class="saveimg-${x}" \n                        style="background-color: #301a6b;position: absolute;left: 30rem;top: -0rem;width: 2.5rem;height: 2.5rem;border-radius: 30%;border: 4px solid rgb(95, 110, 231);cursor: pointer;"><img src="${this.rp["saveimg".toLowerCase()]}" style="\n                        width: 1.9rem;\n                        height: 1.9rem;\n                        margin-top: 0.3rem;\n                        margin-left: 0.3rem;\n                        pointer-events: none;\n                        " id="saveAlbumImg-${x}"></div>`,
                                        l = document.createElement("div");
                                    l.innerHTML = s, setTimeout((() => {
                                        p.querySelector(".content")
                                            .appendChild(l)
                                    }), 500)
                                }
                            }))
                    }
                }
                if (x == GAMEDATA.v.$) {
                    let p;
                    if (this.cp(), this.hp = {}, this.np = !1, Object.keys(s)
                        .forEach((x => {
                            "previous" == x && (p = s[x], this.np = !0), "background" == x && (p = {
                                data: s[x]
                            })
                        })), p && p.data)
                        for (let x in p.data) this.hp[x] = p.data[x]
                }
            }, this.kp = p => {
                let x = p;
                if (x.data && "string" == typeof x.data && x.data.includes("[")) {
                    let p = JSON.parse(x.data.replace(/[^\[]{0,}/, ""))[2];
                    p && p.hasOwnProperty("turnNum") && Object.keys(p)
                        .forEach((x => {
                            "turnNum" == x && (this.Z = p[x])
                        }))
                }
                x.data && x.data.indexOf && 0 == x.data.indexOf("42") && this.yp(JSON.parse(x.data.substr(2, x.data.length - 2)))
            }, this.Gp = !1, this.Ip = () => {
                window.mod.drawScriptLoaded || this.Gp || document.body.querySelectorAll("script")
                    .forEach((async p => {
                        if (-1 != p.src.indexOf("blob:") || -1 != p.src.indexOf("draw")) {
                            this.Gp = !0;
                            let x = document.createElement("script"),
                                s = await window.mod.gp(p.src);
                            s = window.mod.vp(s), x.classList.add("draw_script");
                            let l = new Blob([s]);
                            x.src = URL.createObjectURL(l), p.remove(), this.xp && (document.body.appendChild(x), window.mod.drawScriptLoaded = !0, Log("Draw script loaded"))
                        }
                    }))
            }, this.Rp = p => {
                let x = document.querySelector(".jsx-187140558"),
                    s = document.querySelector("#drawPreviewCanvas");
                s || (s = x.cloneNode(!0), s.classList.remove("jsx-187140558"), s.style.width = "758px", s.style.height = "424px", s.id = "drawPreviewCanvas", s.background = "transparent", x.parentNode.insertBefore(s, x)), x.parentNode.childNodes[1];
                var l = new Image;
                l.onload = function() {
                    s.getContext("2d")
                        .drawImage(l, 0, 0, s.width, s.height)
                }, l.src = p
            }, this.Tp = (p, x = "stretch", s = 758, l = 424, h = 2) => {
                Log("Drawing image");
                let t = this.ip || .4;
                h = Math.round(2 / t) + 5, origWidth = s, origHeight = l, s = Math.round(origWidth * t), l = Math.round(origHeight * t);
                let e = document.createElement("canvas");
                e.width = s, e.height = l;
                let i = e.getContext("2d");
                i.imageSmoothingQuality = "high", i.fillStyle = "white", i.fillRect(0, 0, s, l);
                let n = 0,
                    o = 0,
                    r = s,
                    a = l;
                if ("stretch" != x) {
                    const h = p.width / p.height,
                        t = e.width / e.height;
                    "zoom" == x ? h > t ? (r = p.width * (l / p.height), n = (s - r) / 2) : h < t && (a = p.height * (s / p.width), o = (l - a) / 2) : h < t ? (r = p.width * (l / p.height), n = (s - r) / 2) : h > t && (a = p.height * (s / p.width), o = (l - a) / 2)
                }
                i.drawImage(p, n, o, r, a);
                let d = document.querySelector(".jsx-187140558");
                d.getContext("2d")
                    .drawImage(e, 0, 0, d.width, d.height);
                let c = i.getImageData(0, 0, s, l)
                    .data,
                    w = [],
                    u = [],
                    g = 0;
                if (this.fp()) return alert("В этом режиме нельзя вставить картинку");
                {
                    let p = {},
                        x = 0;
                    for (let e = 0; e < l; e++)
                        for (let l = 0; l < s; l++) {
                            let s = this.up(c[x], c[x + 1], c[x + 2]),
                                i = Math.round(l / t),
                                n = Math.round(e / t);
                            null == p[s] ? (p[s] = [8, g, [s, c[3] / 255], i, n, n, h], g++) : p[s].push(i, n, n, h), x += 4
                        }
                    for (let x in p) {
                        u.push(p[x]);
                        let s = `42[2,7,{"t":${this.Z||0},"d":1,"v":` + JSON.stringify(p[x]) + "}]";
                        w.push(s)
                    }
                    this.pp = !1, this._p() && window.setData(u)
                }
                return this.pp = !0, this.Mp(w, u)
            }, this.Mp = (p, x) => (this.sp = !0, new Promise((x => {
                let s = 0,
                    l = 0,
                    h = 2,
                    t = this.tp || 2e3,
                    e = this.ep || 250,
                    i = 0;
                const n = p => {
                    "3" == p.data && (i++, i >= h && (this.xp.removeEventListener("message", n), x()))
                };
                this.xp.addEventListener("message", n), this.xp.send("2");
                let o = setInterval((() => {
                    this.xp.send("2"), h++
                }), 1e4);
                const r = h => {
                    let i = document.querySelector(".sendingbtnContent");
                    if (i) {
                        let x = Math.round(s / p.length * 100);
                        i.innerHTML = "Sending (" + x + "%)"
                    }
                    if (Log(`Sending: ${s} / ${p.length}`), this.xp.readyState != WebSocket.OPEN) return Log("Reconnecting", this.xp.readyState), void setTimeout((() => r(t)), e);
                    if (s >= p.length) return clearInterval(o), this.xp.send("2"), this.sp = !1, Log("Finished sending packets"), void this.xp.addEventListener("close", x);
                    let n = h;
                    for (n > p.length - s && (n = p.length - s); n > 0;) Log(p[s]), this.xp.send(p[s]), n--, l += p[s].length, s++;
                    setTimeout((() => r(t)), e)
                };
                r(t)
            })))
    }), !window._mod_injected) {
    globalThis.setmoddata = p => {
        window.mod.rp = p;
        let x = {};
        x["event".toLowerCase()] = 4, chrome.runtime.sendMessage(p.id, x), p.opened && window.mod.ap && (window.mod.ap = !1, Object.values(window.mod.dp)
            .forEach((p => {
                let x = document.querySelector(`#saveAlbumImg-${p.nickname}`);
                x.src = window.mod.rp.saveimg, x.style.transform = "", x.classList.remove("loadingImageRotate"), globalThis.saverecord(p.id, p.canvas, p.points)
            })), window.mod.dp = {})
    }, Node.prototype.appendChild = new Proxy(Node.prototype.appendChild, {
        async apply(p, x, [s]) {
            if ("SCRIPT" == s.tagName && -1 != s.src.indexOf("draw")) {
                let p = await window.mod.gp(s.src);
                if (p = window.mod.vp(p), p) {
                    let x = new Blob([p]);
                    s.src = URL.createObjectURL(x), s.classList.add("draw_script"), window.mod.drawScriptLoaded = !0
                }
            }
            return Reflect.apply(...arguments)
        }
    });
    var _waitforlinkchange = !1;
    setInterval((() => {
        document.head.querySelectorAll("._execute_script")
            .forEach((v => {
                v.remove(), eval(v.innerHTML)
            })), window.mod.q += .3, window.mod.q > 360 && (window.mod.q = 0), document.querySelectorAll(".loadingImageRotate")
            .forEach((p => {
                p.style.transform = `rotate(${window.mod.q}deg)`
            }))
    }), 10);
    var onsendorig = WebSocket.prototype.send;
    WebSocket.prototype.send = function(...p) {
            return window.mod.Np(...p), onsendorig.call(this, ...p)
        }, window.onopengetter = Object.getOwnPropertyDescriptor(WebSocket.prototype, "onopen")
        .get, window.onopensetter = Object.getOwnPropertyDescriptor(WebSocket.prototype, "onopen")
        .set, Object.defineProperty(window.WebSocket.prototype, "onopen", {
            get() {
                return window.onopengetter.apply(this)
            },
            set() {
                let p = arguments[0];
                return arguments[0] = function(...x) {
                    globalThis.draw = window.mod.Ep, globalThis.story = window.mod.Dp, globalThis.getrecord = () => console.log(JSON.stringify(window.mod.lp)), globalThis.saveAlbumDrawing = p => {
                        let x = window.mod.op[p];
                        document.querySelectorAll(".drawBalloon")
                            .forEach((s => {
                                if (s.querySelector(".nick")
                                    .innerHTML == p) {
                                    let l = document.querySelector(`#saveAlbumImg-${p}`);
                                    l.src = window.mod.rp.loadingicon, l.classList.add("loadingImageRotate"), window.mod.dp[p] = {
                                        id: window.mod.rp.id,
                                        canvas: s.querySelector("canvas"),
                                        points: x,
                                        nickname: p
                                    }, window.mod.ap = !0
                                }
                            }))
                    }, globalThis.saverecord = (p, x, s) => {
                        let l, h = 0,
                            t = document.querySelector(".drawingContainer")
                            ?.querySelectorAll("canvas")[0],
                            e = document.querySelector(".core")
                            ?.querySelectorAll("canvas")[0];
                        if (t ? l = t : (l = e, h = 1), x && s && (l = x, h = 2), !l) return;
                        let i = l.getContext("2d"),
                            n = i.getImageData(0, 0, l.width, l.height),
                            o = i.globalCompositeOperation;
                        i.globalCompositeOperation = "destination-over", i.fillStyle = "#fff", i.fillRect(0, 0, l.width, l.height), i.globalCompositeOperation;
                        let r = l.toDataURL("image/jpeg");
                        i.clearRect(0, 0, l.width, l.height), i.putImageData(n, 0, 0), i.globalCompositeOperation = o;
                        let a = {};
                        a["event".toLowerCase()] = 2, 0 == h ? a["points".toLowerCase()] = JSON.stringify(window.mod.lp) : 1 == h ? a["points".toLowerCase()] = JSON.stringify(window.mod.hp) : 2 == h && (a["points".toLowerCase()] = JSON.stringify(s)), a["image".toLowerCase()] = r, chrome.runtime.sendMessage(p, a)
                    }, window.mod.Sp(...x), p.call(this, ...x)
                }, window.onopensetter.apply(this, arguments)
            }
        }), window.onmessagegetter = Object.getOwnPropertyDescriptor(WebSocket.prototype, "onmessage")
        .get, window.onmessagesetter = Object.getOwnPropertyDescriptor(WebSocket.prototype, "onmessage")
        .set, Object.defineProperty(window.WebSocket.prototype, "onmessage", {
            get() {
                return window.onmessagegetter.apply(this)
            },
            set() {
                let p = arguments[0];
                return arguments[0] = function(...x) {
                    window.mod.kp(...x), p.call(this, ...x)
                }, window.onmessagesetter.apply(this, arguments)
            }
        }), CanvasRenderingContext2D.prototype.stroke = new Proxy(CanvasRenderingContext2D.prototype.stroke, {
            async apply(p, x, [s]) {
                if (window.mod.pp) return Reflect.apply(...arguments)
            }
        }), CanvasRenderingContext2D.prototype.fill = new Proxy(CanvasRenderingContext2D.prototype.fill, {
            async apply(p, x, [s]) {
                if (window.mod.pp) return Reflect.apply(...arguments)
            }
        }), CanvasRenderingContext2D.prototype.clearRect = new Proxy(CanvasRenderingContext2D.prototype.clearRect, {
            async apply(p, x, [s]) {
                if (window.mod.pp) return Reflect.apply(...arguments)
            }
        });
    var ismodinjectedel = document.createElement("div");
    ismodinjectedel.id = "_mod_injected", document.head.appendChild(ismodinjectedel);
    var css = "text-shadow: -1px -1px hsl(0,100%,50%), 1px 1px hsl(5.4, 100%, 50%), 3px 2px hsl(10.8, 100%, 50%), 5px 3px hsl(16.2, 100%, 50%), 7px 4px hsl(21.6, 100%, 50%), 9px 5px hsl(27, 100%, 50%), 11px 6px hsl(32.4, 100%, 50%), 13px 7px hsl(37.8, 100%, 50%), 14px 8px hsl(43.2, 100%, 50%), 16px 9px hsl(48.6, 100%, 50%), 18px 10px hsl(54, 100%, 50%), 20px 11px hsl(59.4, 100%, 50%), 22px 12px hsl(64.8, 100%, 50%), 23px 13px hsl(70.2, 100%, 50%), 25px 14px hsl(75.6, 100%, 50%), 27px 15px hsl(81, 100%, 50%), 28px 16px hsl(86.4, 100%, 50%), 30px 17px hsl(91.8, 100%, 50%), 32px 18px hsl(97.2, 100%, 50%), 33px 19px hsl(102.6, 100%, 50%), 35px 20px hsl(108, 100%, 50%), 36px 21px hsl(113.4, 100%, 50%), 38px 22px hsl(118.8, 100%, 50%), 39px 23px hsl(124.2, 100%, 50%), 41px 24px hsl(129.6, 100%, 50%), 42px 25px hsl(135, 100%, 50%), 43px 26px hsl(140.4, 100%, 50%), 45px 27px hsl(145.8, 100%, 50%), 46px 28px hsl(151.2, 100%, 50%), 47px 29px hsl(156.6, 100%, 50%), 48px 30px hsl(162, 100%, 50%), 49px 31px hsl(167.4, 100%, 50%), 50px 32px hsl(172.8, 100%, 50%), 51px 33px hsl(178.2, 100%, 50%), 52px 34px hsl(183.6, 100%, 50%), 53px 35px hsl(189, 100%, 50%), 54px 36px hsl(194.4, 100%, 50%), 55px 37px hsl(199.8, 100%, 50%), 55px 38px hsl(205.2, 100%, 50%), 56px 39px hsl(210.6, 100%, 50%), 57px 40px hsl(216, 100%, 50%), 57px 41px hsl(221.4, 100%, 50%), 58px 42px hsl(226.8, 100%, 50%), 58px 43px hsl(232.2, 100%, 50%), 58px 44px hsl(237.6, 100%, 50%), 59px 45px hsl(243, 100%, 50%), 59px 46px hsl(248.4, 100%, 50%), 59px 47px hsl(253.8, 100%, 50%), 59px 48px hsl(259.2, 100%, 50%), 59px 49px hsl(264.6, 100%, 50%), 60px 50px hsl(270, 100%, 50%), 59px 51px hsl(275.4, 100%, 50%), 59px 52px hsl(280.8, 100%, 50%), 59px 53px hsl(286.2, 100%, 50%), 59px 54px hsl(291.6, 100%, 50%), 59px 55px hsl(297, 100%, 50%), 58px 56px hsl(302.4, 100%, 50%), 58px 57px hsl(307.8, 100%, 50%), 58px 58px hsl(313.2, 100%, 50%), 57px 59px hsl(318.6, 100%, 50%), 57px 60px hsl(324, 100%, 50%), 56px 61px hsl(329.4, 100%, 50%), 55px 62px hsl(334.8, 100%, 50%), 55px 63px hsl(340.2, 100%, 50%), 54px 64px hsl(345.6, 100%, 50%), 53px 65px hsl(351, 100%, 50%), 52px 66px hsl(356.4, 100%, 50%), 51px 67px hsl(361.8, 100%, 50%), 50px 68px hsl(367.2, 100%, 50%), 49px 69px hsl(372.6, 100%, 50%), 48px 70px hsl(378, 100%, 50%), 47px 71px hsl(383.4, 100%, 50%), 46px 72px hsl(388.8, 100%, 50%), 45px 73px hsl(394.2, 100%, 50%), 43px 74px hsl(399.6, 100%, 50%), 42px 75px hsl(405, 100%, 50%), 41px 76px hsl(410.4, 100%, 50%), 39px 77px hsl(415.8, 100%, 50%), 38px 78px hsl(421.2, 100%, 50%), 36px 79px hsl(426.6, 100%, 50%), 35px 80px hsl(432, 100%, 50%), 33px 81px hsl(437.4, 100%, 50%), 32px 82px hsl(442.8, 100%, 50%), 30px 83px hsl(448.2, 100%, 50%), 28px 84px hsl(453.6, 100%, 50%), 27px 85px hsl(459, 100%, 50%), 25px 86px hsl(464.4, 100%, 50%), 23px 87px hsl(469.8, 100%, 50%), 22px 88px hsl(475.2, 100%, 50%), 20px 89px hsl(480.6, 100%, 50%), 18px 90px hsl(486, 100%, 50%), 16px 91px hsl(491.4, 100%, 50%), 14px 92px hsl(496.8, 100%, 50%), 13px 93px hsl(502.2, 100%, 50%), 11px 94px hsl(507.6, 100%, 50%), 9px 95px hsl(513, 100%, 50%), 7px 96px hsl(518.4, 100%, 50%), 5px 97px hsl(523.8, 100%, 50%), 3px 98px hsl(529.2, 100%, 50%), 1px 99px hsl(534.6, 100%, 50%), 7px 100px hsl(540, 100%, 50%), -1px 101px hsl(545.4, 100%, 50%), -3px 102px hsl(550.8, 100%, 50%), -5px 103px hsl(556.2, 100%, 50%), -7px 104px hsl(561.6, 100%, 50%), -9px 105px hsl(567, 100%, 50%), -11px 106px hsl(572.4, 100%, 50%), -13px 107px hsl(577.8, 100%, 50%), -14px 108px hsl(583.2, 100%, 50%), -16px 109px hsl(588.6, 100%, 50%), -18px 110px hsl(594, 100%, 50%), -20px 111px hsl(599.4, 100%, 50%), -22px 112px hsl(604.8, 100%, 50%), -23px 113px hsl(610.2, 100%, 50%), -25px 114px hsl(615.6, 100%, 50%), -27px 115px hsl(621, 100%, 50%), -28px 116px hsl(626.4, 100%, 50%), -30px 117px hsl(631.8, 100%, 50%), -32px 118px hsl(637.2, 100%, 50%), -33px 119px hsl(642.6, 100%, 50%), -35px 120px hsl(648, 100%, 50%), -36px 121px hsl(653.4, 100%, 50%), -38px 122px hsl(658.8, 100%, 50%), -39px 123px hsl(664.2, 100%, 50%), -41px 124px hsl(669.6, 100%, 50%), -42px 125px hsl(675, 100%, 50%), -43px 126px hsl(680.4, 100%, 50%), -45px 127px hsl(685.8, 100%, 50%), -46px 128px hsl(691.2, 100%, 50%), -47px 129px hsl(696.6, 100%, 50%), -48px 130px hsl(702, 100%, 50%), -49px 131px hsl(707.4, 100%, 50%), -50px 132px hsl(712.8, 100%, 50%), -51px 133px hsl(718.2, 100%, 50%), -52px 134px hsl(723.6, 100%, 50%), -53px 135px hsl(729, 100%, 50%), -54px 136px hsl(734.4, 100%, 50%), -55px 137px hsl(739.8, 100%, 50%), -55px 138px hsl(745.2, 100%, 50%), -56px 139px hsl(750.6, 100%, 50%), -57px 140px hsl(756, 100%, 50%), -57px 141px hsl(761.4, 100%, 50%), -58px 142px hsl(766.8, 100%, 50%), -58px 143px hsl(772.2, 100%, 50%), -58px 144px hsl(777.6, 100%, 50%), -59px 145px hsl(783, 100%, 50%), -59px 146px hsl(788.4, 100%, 50%), -59px 147px hsl(793.8, 100%, 50%), -59px 148px hsl(799.2, 100%, 50%), -59px 149px hsl(804.6, 100%, 50%), -60px 150px hsl(810, 100%, 50%), -59px 151px hsl(815.4, 100%, 50%), -59px 152px hsl(820.8, 100%, 50%), -59px 153px hsl(826.2, 100%, 50%), -59px 154px hsl(831.6, 100%, 50%), -59px 155px hsl(837, 100%, 50%), -58px 156px hsl(842.4, 100%, 50%), -58px 157px hsl(847.8, 100%, 50%), -58px 158px hsl(853.2, 100%, 50%), -57px 159px hsl(858.6, 100%, 50%), -57px 160px hsl(864, 100%, 50%), -56px 161px hsl(869.4, 100%, 50%), -55px 162px hsl(874.8, 100%, 50%), -55px 163px hsl(880.2, 100%, 50%), -54px 164px hsl(885.6, 100%, 50%), -53px 165px hsl(891, 100%, 50%), -52px 166px hsl(896.4, 100%, 50%), -51px 167px hsl(901.8, 100%, 50%), -50px 168px hsl(907.2, 100%, 50%), -49px 169px hsl(912.6, 100%, 50%), -48px 170px hsl(918, 100%, 50%), -47px 171px hsl(923.4, 100%, 50%), -46px 172px hsl(928.8, 100%, 50%), -45px 173px hsl(934.2, 100%, 50%), -43px 174px hsl(939.6, 100%, 50%), -42px 175px hsl(945, 100%, 50%), -41px 176px hsl(950.4, 100%, 50%), -39px 177px hsl(955.8, 100%, 50%), -38px 178px hsl(961.2, 100%, 50%), -36px 179px hsl(966.6, 100%, 50%), -35px 180px hsl(972, 100%, 50%), -33px 181px hsl(977.4, 100%, 50%), -32px 182px hsl(982.8, 100%, 50%), -30px 183px hsl(988.2, 100%, 50%), -28px 184px hsl(993.6, 100%, 50%), -27px 185px hsl(999, 100%, 50%), -25px 186px hsl(1004.4, 100%, 50%), -23px 187px hsl(1009.8, 100%, 50%), -22px 188px hsl(1015.2, 100%, 50%), -20px 189px hsl(1020.6, 100%, 50%), -18px 190px hsl(1026, 100%, 50%), -16px 191px hsl(1031.4, 100%, 50%), -14px 192px hsl(1036.8, 100%, 50%), -13px 193px hsl(1042.2, 100%, 50%), -11px 194px hsl(1047.6, 100%, 50%), -9px 195px hsl(1053, 100%, 50%), -7px 196px hsl(1058.4, 100%, 50%), -5px 197px hsl(1063.8, 100%, 50%), -3px 198px hsl(1069.2, 100%, 50%), -1px 199px hsl(1074.6, 100%, 50%), -1px 200px hsl(1080, 100%, 50%), 1px 201px hsl(1085.4, 100%, 50%), 3px 202px hsl(1090.8, 100%, 50%), 5px 203px hsl(1096.2, 100%, 50%), 7px 204px hsl(1101.6, 100%, 50%), 9px 205px hsl(1107, 100%, 50%), 11px 206px hsl(1112.4, 100%, 50%), 13px 207px hsl(1117.8, 100%, 50%), 14px 208px hsl(1123.2, 100%, 50%), 16px 209px hsl(1128.6, 100%, 50%), 18px 210px hsl(1134, 100%, 50%), 20px 211px hsl(1139.4, 100%, 50%), 22px 212px hsl(1144.8, 100%, 50%), 23px 213px hsl(1150.2, 100%, 50%), 25px 214px hsl(1155.6, 100%, 50%), 27px 215px hsl(1161, 100%, 50%), 28px 216px hsl(1166.4, 100%, 50%), 30px 217px hsl(1171.8, 100%, 50%), 32px 218px hsl(1177.2, 100%, 50%), 33px 219px hsl(1182.6, 100%, 50%), 35px 220px hsl(1188, 100%, 50%), 36px 221px hsl(1193.4, 100%, 50%), 38px 222px hsl(1198.8, 100%, 50%), 39px 223px hsl(1204.2, 100%, 50%), 41px 224px hsl(1209.6, 100%, 50%), 42px 225px hsl(1215, 100%, 50%), 43px 226px hsl(1220.4, 100%, 50%), 45px 227px hsl(1225.8, 100%, 50%), 46px 228px hsl(1231.2, 100%, 50%), 47px 229px hsl(1236.6, 100%, 50%), 48px 230px hsl(1242, 100%, 50%), 49px 231px hsl(1247.4, 100%, 50%), 50px 232px hsl(1252.8, 100%, 50%), 51px 233px hsl(1258.2, 100%, 50%), 52px 234px hsl(1263.6, 100%, 50%), 53px 235px hsl(1269, 100%, 50%), 54px 236px hsl(1274.4, 100%, 50%), 55px 237px hsl(1279.8, 100%, 50%), 55px 238px hsl(1285.2, 100%, 50%), 56px 239px hsl(1290.6, 100%, 50%), 57px 240px hsl(1296, 100%, 50%), 57px 241px hsl(1301.4, 100%, 50%), 58px 242px hsl(1306.8, 100%, 50%), 58px 243px hsl(1312.2, 100%, 50%), 58px 244px hsl(1317.6, 100%, 50%), 59px 245px hsl(1323, 100%, 50%), 59px 246px hsl(1328.4, 100%, 50%), 59px 247px hsl(1333.8, 100%, 50%), 59px 248px hsl(1339.2, 100%, 50%), 59px 249px hsl(1344.6, 100%, 50%), 60px 250px hsl(1350, 100%, 50%), 59px 251px hsl(1355.4, 100%, 50%), 59px 252px hsl(1360.8, 100%, 50%), 59px 253px hsl(1366.2, 100%, 50%), 59px 254px hsl(1371.6, 100%, 50%), 59px 255px hsl(1377, 100%, 50%), 58px 256px hsl(1382.4, 100%, 50%), 58px 257px hsl(1387.8, 100%, 50%), 58px 258px hsl(1393.2, 100%, 50%), 57px 259px hsl(1398.6, 100%, 50%), 57px 260px hsl(1404, 100%, 50%), 56px 261px hsl(1409.4, 100%, 50%), 55px 262px hsl(1414.8, 100%, 50%), 55px 263px hsl(1420.2, 100%, 50%), 54px 264px hsl(1425.6, 100%, 50%), 53px 265px hsl(1431, 100%, 50%), 52px 266px hsl(1436.4, 100%, 50%), 51px 267px hsl(1441.8, 100%, 50%), 50px 268px hsl(1447.2, 100%, 50%), 49px 269px hsl(1452.6, 100%, 50%), 48px 270px hsl(1458, 100%, 50%), 47px 271px hsl(1463.4, 100%, 50%), 46px 272px hsl(1468.8, 100%, 50%), 45px 273px hsl(1474.2, 100%, 50%), 43px 274px hsl(1479.6, 100%, 50%), 42px 275px hsl(1485, 100%, 50%), 41px 276px hsl(1490.4, 100%, 50%), 39px 277px hsl(1495.8, 100%, 50%), 38px 278px hsl(1501.2, 100%, 50%), 36px 279px hsl(1506.6, 100%, 50%), 35px 280px hsl(1512, 100%, 50%), 33px 281px hsl(1517.4, 100%, 50%), 32px 282px hsl(1522.8, 100%, 50%), 30px 283px hsl(1528.2, 100%, 50%), 28px 284px hsl(1533.6, 100%, 50%), 27px 285px hsl(1539, 100%, 50%), 25px 286px hsl(1544.4, 100%, 50%), 23px 287px hsl(1549.8, 100%, 50%), 22px 288px hsl(1555.2, 100%, 50%), 20px 289px hsl(1560.6, 100%, 50%), 18px 290px hsl(1566, 100%, 50%), 16px 291px hsl(1571.4, 100%, 50%), 14px 292px hsl(1576.8, 100%, 50%), 13px 293px hsl(1582.2, 100%, 50%), 11px 294px hsl(1587.6, 100%, 50%), 9px 295px hsl(1593, 100%, 50%), 7px 296px hsl(1598.4, 100%, 50%), 5px 297px hsl(1603.8, 100%, 50%), 3px 298px hsl(1609.2, 100%, 50%), 1px 299px hsl(1614.6, 100%, 50%), 2px 300px hsl(1620, 100%, 50%), -1px 301px hsl(1625.4, 100%, 50%), -3px 302px hsl(1630.8, 100%, 50%), -5px 303px hsl(1636.2, 100%, 50%), -7px 304px hsl(1641.6, 100%, 50%), -9px 305px hsl(1647, 100%, 50%), -11px 306px hsl(1652.4, 100%, 50%), -13px 307px hsl(1657.8, 100%, 50%), -14px 308px hsl(1663.2, 100%, 50%), -16px 309px hsl(1668.6, 100%, 50%), -18px 310px hsl(1674, 100%, 50%), -20px 311px hsl(1679.4, 100%, 50%), -22px 312px hsl(1684.8, 100%, 50%), -23px 313px hsl(1690.2, 100%, 50%), -25px 314px hsl(1695.6, 100%, 50%), -27px 315px hsl(1701, 100%, 50%), -28px 316px hsl(1706.4, 100%, 50%), -30px 317px hsl(1711.8, 100%, 50%), -32px 318px hsl(1717.2, 100%, 50%), -33px 319px hsl(1722.6, 100%, 50%), -35px 320px hsl(1728, 100%, 50%), -36px 321px hsl(1733.4, 100%, 50%), -38px 322px hsl(1738.8, 100%, 50%), -39px 323px hsl(1744.2, 100%, 50%), -41px 324px hsl(1749.6, 100%, 50%), -42px 325px hsl(1755, 100%, 50%), -43px 326px hsl(1760.4, 100%, 50%), -45px 327px hsl(1765.8, 100%, 50%), -46px 328px hsl(1771.2, 100%, 50%), -47px 329px hsl(1776.6, 100%, 50%), -48px 330px hsl(1782, 100%, 50%), -49px 331px hsl(1787.4, 100%, 50%), -50px 332px hsl(1792.8, 100%, 50%), -51px 333px hsl(1798.2, 100%, 50%), -52px 334px hsl(1803.6, 100%, 50%), -53px 335px hsl(1809, 100%, 50%), -54px 336px hsl(1814.4, 100%, 50%), -55px 337px hsl(1819.8, 100%, 50%), -55px 338px hsl(1825.2, 100%, 50%), -56px 339px hsl(1830.6, 100%, 50%), -57px 340px hsl(1836, 100%, 50%), -57px 341px hsl(1841.4, 100%, 50%), -58px 342px hsl(1846.8, 100%, 50%), -58px 343px hsl(1852.2, 100%, 50%), -58px 344px hsl(1857.6, 100%, 50%), -59px 345px hsl(1863, 100%, 50%), -59px 346px hsl(1868.4, 100%, 50%), -59px 347px hsl(1873.8, 100%, 50%), -59px 348px hsl(1879.2, 100%, 50%), -59px 349px hsl(1884.6, 100%, 50%), -60px 350px hsl(1890, 100%, 50%), -59px 351px hsl(1895.4, 100%, 50%), -59px 352px hsl(1900.8, 100%, 50%), -59px 353px hsl(1906.2, 100%, 50%), -59px 354px hsl(1911.6, 100%, 50%), -59px 355px hsl(1917, 100%, 50%), -58px 356px hsl(1922.4, 100%, 50%), -58px 357px hsl(1927.8, 100%, 50%), -58px 358px hsl(1933.2, 100%, 50%), -57px 359px hsl(1938.6, 100%, 50%), -57px 360px hsl(1944, 100%, 50%), -56px 361px hsl(1949.4, 100%, 50%), -55px 362px hsl(1954.8, 100%, 50%), -55px 363px hsl(1960.2, 100%, 50%), -54px 364px hsl(1965.6, 100%, 50%), -53px 365px hsl(1971, 100%, 50%), -52px 366px hsl(1976.4, 100%, 50%), -51px 367px hsl(1981.8, 100%, 50%), -50px 368px hsl(1987.2, 100%, 50%), -49px 369px hsl(1992.6, 100%, 50%), -48px 370px hsl(1998, 100%, 50%), -47px 371px hsl(2003.4, 100%, 50%), -46px 372px hsl(2008.8, 100%, 50%), -45px 373px hsl(2014.2, 100%, 50%), -43px 374px hsl(2019.6, 100%, 50%), -42px 375px hsl(2025, 100%, 50%), -41px 376px hsl(2030.4, 100%, 50%), -39px 377px hsl(2035.8, 100%, 50%), -38px 378px hsl(2041.2, 100%, 50%), -36px 379px hsl(2046.6, 100%, 50%), -35px 380px hsl(2052, 100%, 50%), -33px 381px hsl(2057.4, 100%, 50%), -32px 382px hsl(2062.8, 100%, 50%), -30px 383px hsl(2068.2, 100%, 50%), -28px 384px hsl(2073.6, 100%, 50%), -27px 385px hsl(2079, 100%, 50%), -25px 386px hsl(2084.4, 100%, 50%), -23px 387px hsl(2089.8, 100%, 50%), -22px 388px hsl(2095.2, 100%, 50%), -20px 389px hsl(2100.6, 100%, 50%), -18px 390px hsl(2106, 100%, 50%), -16px 391px hsl(2111.4, 100%, 50%), -14px 392px hsl(2116.8, 100%, 50%), -13px 393px hsl(2122.2, 100%, 50%), -11px 394px hsl(2127.6, 100%, 50%), -9px 395px hsl(2133, 100%, 50%), -7px 396px hsl(2138.4, 100%, 50%), -5px 397px hsl(2143.8, 100%, 50%), -3px 398px hsl(2149.2, 100%, 50%), -1px 399px hsl(2154.6, 100%, 50%); font-size: 40px;";
    console.log("%c GarticPhone Mod by", 'font-family: "Comic Sans MS", "Comic Sans", cursive; color: rgb(173 202 255 / 80%); font-size: 3rem; -webkit-text-stroke: 2px black;'), console.log("%c Pudgergun   ", css + ";font-size: 4.8rem;");
    let errorCss = 'font-family: "Century Gothic",Verdana,sans-serif; color: black; font-size: 1rem; -webkit-text-stroke: 0.2px red; text-shadow: 2px 2px 3px gray',
        defaultCss = 'font-family: "Century Gothic",Verdana,sans-serif; color: black; font-size: 1rem; -webkit-text-stroke: 0.2px green; text-shadow: 2px 2px 3px gray';
    function Log(p, x = !1) {
        console.log("%c [MOD] " + p, x ? errorCss : defaultCss)
    }
    let originalLog = console.log;
    console.log = (p, x) => {
        p.indexOf("[MOD]") <= -1 || originalLog.call(this, p, x)
    }
}
