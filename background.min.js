const MessageTypes = {
    drawPicture: 1,
    saveRecord: 2,
    drawRecord: 3,
    setModDataResponse: 4,
    popupPing: 5
};
let saveRecordCallback;
let isPopupOpened = false;
let lastPopupPing = 0;
let saveDrawingQueue = [];
chrome.tabs.onUpdated.addListener((function(tabId, changeInfo, tab) {
    if (changeInfo.status == "complete") {
        let foundGartic = tab?.url?.toLowerCase()
            .indexOf("garticphone");
        if (!foundGartic || foundGartic == -1) return;
        chrome.scripting.executeScript({
            target: {
                tabId: tabId
            },
            function: inject
        })
    }
}));
function GetCurrentTab() {
    return new Promise((res => {
        chrome.tabs.query({}, (function(tabs) {
            tabs = tabs.filter((v => v?.url?.indexOf("garticphone.com") > 0 && v.active));
            tabs = tabs.sort((function(a, b) {
                if (a.active) return -1;
                if (b.active) return 1;
                return 0
            }));
            res(tabs[0])
        }))
    }))
}
chrome.runtime.onMessageExternal.addListener((function(request, sender, sendResponse) {
    if (!request.event) return;
    if (request.event == MessageTypes.saveRecord) {
        console.log(request);
        saveDrawingQueue.push(request);
        chrome.runtime.sendMessage({
            msg: "saveRecord",
            data: request
        })
    }
    if (request.event == MessageTypes.setModDataResponse) {}
}));
chrome.runtime.onMessage.addListener((function(message, sender, callback) {
    if (message.type == MessageTypes.drawPicture) {
        if (!message.data.url) return;
        execute(`globalThis.draw("${message.data.url}");`)
    }
    if (message.type == MessageTypes.saveRecord) {
        saveRecordCallback = callback;
        execute(`globalThis.saverecord("${chrome.runtime.id}")`);
        return true
    }
    if (message.type == MessageTypes.drawRecord) {
        saveRecordCallback = callback;
        execute(`globalThis.story(${message.data.points}, '${message.data.image}')`);
        return true
    }
    if (message.type == MessageTypes.popupPing) {
        isPopupOpened = true;
        lastPopupPing = Date.now();
        return true
    }
}));
async function execute(value) {
    let tab = await GetCurrentTab();
    if (!tab) return;
    chrome.scripting.executeScript({
        target: {
            tabId: tab.id
        },
        function: function(v) {
            let paramElement = document.createElement("div");
            paramElement.className = `_execute_script`;
            paramElement.innerHTML = `${v}`;
            document.head.appendChild(paramElement)
        },
        args: [value]
    })
}
async function inject() {
    if (document.querySelector("#_mod_injected")) return;
    let script = document.createElement("script");
    script.src = chrome.runtime.getURL("mod.min.js");
    document.head.appendChild(script)
}
setInterval((() => {
    let data = {
        id: chrome.runtime.id,
        saveimg: chrome.runtime.getURL("images/saveicon.svg"),
        loadingicon: chrome.runtime.getURL("images/loadingicon.png"),
        opened: isPopupOpened
    };
    execute(`globalThis.setmoddata(${JSON.stringify(data)})`)
}), 500);
setInterval((() => {
    if (Date.now() > lastPopupPing + 150) isPopupOpened = false
}), 10);
